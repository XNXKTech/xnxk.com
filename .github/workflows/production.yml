name: Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Split string
        uses: jungwinter/split@v2
        id: split
        with:
          separator: '/'
          msg: ${{ github.ref }}

      - name: Checkout ${{ steps.split.outputs._2 }}
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.split.outputs._2 }}

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v3.3.0
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Setup yarn
        run: npm install -g yarn

      - name: Setup Nodejs with yarn caching
        uses: actions/setup-node@v3.3.0
        with:
          node-version: ${{ matrix.node }}
          cache: yarn

      - name: Cache dependencies
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn

      - name: Install package.json dependencies with Yarn
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
          HUSKY_SKIP_INSTALL: true

      - name: Cache build
        uses: actions/cache@v3
        id: build-cache
        with:
          path: |
            build
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Build
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: yarn build

  cloudbase:
    name: Deploy to Tencent Cloudbase
    runs-on: ubuntu-latest
    needs:
      - build
    environment:
      name: Production
      url: https://xnxk.net
    timeout-minutes: 10
    strategy:
      matrix:
        node: [ '16' ]
    steps:
      - name: Split string
        uses: jungwinter/split@v2
        id: split
        with:
          separator: '/'
          msg: ${{ github.ref }}

      - name: Checkout ${{ steps.split.outputs._2 }}
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.split.outputs._2 }}

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v3.3.0
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Setup yarn
        run: npm install -g yarn

      - name: Setup Nodejs with yarn caching
        uses: actions/setup-node@v3.3.0
        with:
          node-version: ${{ matrix.node }}
          cache: yarn

      - uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn

      - name: Install package.json dependencies with Yarn
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
          HUSKY_SKIP_INSTALL: true

      - name: Cache build
        uses: actions/cache@v3
        id: build-cache
        with:
          path: |
            build
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Build
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: yarn build

      - name: Deploy static to Tencent CloudBase
        id: deployStatic
        uses: TencentCloudBase/cloudbase-action@v2
        with:
          secretId: ${{ secrets.TCB_SECRET_ID }}
          secretKey: ${{ secrets.TCB_SECRET_KEY }}
          envId: ${{ secrets.ENV_ID }}

  cdn:
    runs-on: ubuntu-latest
    needs:
      - cloudbase

    name: Refresh CDN
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0

      - name: Setup Serverless
        uses: teakowa/setup-serverless@v2
        with:
          provider: tencent
        env:
          TENCENT_APPID: ${{ secrets.TENCENTCLOUD_APP_ID }}
          TENCENT_SECRET_ID: ${{ secrets.TENCENTCLOUD_SLS_SECRET_ID }}
          TENCENT_SECRET_KEY: ${{ secrets.TENCENTCLOUD_SLS_SECRET_KEY}}
          SERVERLESS_PLATFORM_VENDOR: tencent

      - name: Refresh CDN
        run: sls deploy

  notification:
    name: Deploy notification
    runs-on: ubuntu-latest
    needs:
      - cdn
    steps:
      - name: Split Version or Branch
        uses: jungwinter/split@v2
        id: split
        with:
          separator: '/'
          msg: ${{ github.ref }}

      - name: Checkout ${{ steps.split.outputs._2 }}
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.split.outputs._2 }}

      - name: Lark Notification
        run: |
          curl '${{ secrets.SERVICE_UPDATES_ECHO_LARK_BOT_HOOK }}' \
             -H 'Content-Type: application/json' \
              -d '
              {
                "msg_type": "interactive",
                "card": {
                  "config": {
                    "wide_screen_mode": true
                },
                "header": {
                  "template": "green",
                  "title": {
                    "content": "‚úÖ  Production Deployment for ${{ github.repository }} ready!",
                    "tag": "plain_text"
                  }
                },
                "elements": [
                  {
                    "fields": [
                      {
                        "is_short": true,
                        "text": {
                          "content": "**üè∑Ô∏è  VersionÔºö**\n${{ steps.split.outputs._2 }}",
                          "tag": "lark_md"
                        }
                      },
                      {
                        "is_short": true,
                        "text": {
                          "content": "**üöß  StageÔºö**\n[Production](https://github.com/${{ github.repository }}/deployments/activity_log?environment=Production)",
                          "tag": "lark_md"
                        }
                      }
                    ],
                    "tag": "div"
                  },
                  {
                    "fields": [
                      {
                        "is_short": true,
                        "text": {
                          "content": "**üî®  Latest commitÔºö**\n[${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                          "tag": "lark_md"
                        }
                      },
                      {
                        "is_short": true,
                        "text": {
                          "content": "**üîç  Latest deploy logÔºö**\n[${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                          "tag": "lark_md"
                        }
                      }
                    ],
                    "tag": "div"
                  },
                  {
                    "tag": "hr"
                  },
                  {
                    "tag": "markdown",
                    "content": "**ÁâàÊú¨Â∑≤Êé®ÈÄÅËá≥ TCB„ÄÅCDN ËäÇÁÇπÔºåCDN ËäÇÁÇπÂºÄÂßãÊªöÂä®Êõ¥Êñ∞ÔºåÈ¢ÑËÆ°Âá†ÂàÜÈíüÂêéÁîüÊïà„ÄÇ**\n\n"
                  }
                ]
               }
              }'

